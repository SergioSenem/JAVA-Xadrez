6. (0.15) Faça com que o método movimentosPossiveis da Torre devolva as casas as quais ela pode se mexer (para testar, é preciso usar o método selecionar da peca antes de atualizar e desenhar o tabuleiro).

R:

	@Override
	public ArrayList<Casa> movimentosPossiveis(Tabuleiro tabuleiro){

		ArrayList<Casa> casas = new ArrayList<Casa>();

		int largura = this.getLargura();
		int altura = this.getAltura();
		
		int cima = altura-1;
                boolean passouPeca = false;
		while(cima > -1 && !passouPeca){
                    Casa c = tabuleiro.getCasaNaPosicao(cima,largura);

                    if(c.temPeca()){
                        if(c.getPeca().cor != this.cor){
                            casas.add(c);
                        }
                        passouPeca = true;
                    }
                    else{
                        casas.add(c);
                    }

                    cima--;
		}
                
                passouPeca = false;
                int baixo = altura + 1;
                while(baixo < 8 && !passouPeca){
                    Casa c = tabuleiro.getCasaNaPosicao(baixo, largura);
                    
                    if(c.temPeca()){
                        if(c.getPeca().cor != this.cor){
                            casas.add(c);
                        }
                        passouPeca = true;
                    }
                    else{
                        casas.add(c);
                    }
                    
                    baixo++;
                }
                
                passouPeca = false;
                int esquerda = largura - 1;
                while(esquerda > -1 && !passouPeca){
                    Casa c = tabuleiro.getCasaNaPosicao(altura, esquerda);
                    
                    if(c.temPeca()){
                        if(c.getPeca().cor != this.cor){
                            casas.add(c);
                        }
                        passouPeca = true;
                    }
                    else{
                        casas.add(c);
                    }
                    
                    esquerda--;
                }
                
                passouPeca = false;
                int direita = largura + 1;
                while(direita < 8 && !passouPeca){
                    Casa c = tabuleiro.getCasaNaPosicao(altura, direita);
                    
                    if(c.temPeca()){
                        if(c.getPeca().cor != this.cor){
                            casas.add(c);
                        }
                        passouPeca = true;
                    }
                    else{
                        casas.add(c);
                    }
                    
                    direita++;
                }

		//casas.add(this.casa);
		//Teoricamente, no xadrez não existe a opção de uma peça se mover para a posição atual
		
		return casas;
	}